import {API_URL, WX_AUTH_URL, CONTENT_TYPE} from './config'
import {encryption} from './data-encryption'

import axios from 'axios'
import qs from 'qs'

let instance = axios
  .create({baseURL: API_URL, timeout: 10000})
instance
  .defaults
  .headers
  .post['Content-Type'] = CONTENT_TYPE

/**
 * AJAX
 * @param uri
 * @param params
 * @param header
 * @returns {Promise<any>}
 */
export async function ajax (uri, params = {}, header = {}) {
  let newParams = qs.stringify(Object.assign({}, encryption(params), params))
  return new Promise((resolve, reject) => {
    instance.post(uri, newParams).then((response) => {
      resolve(response.data)
    }).catch((errno) => {
      reject(errno)
    })
  })
}

/**
 * 获取url参数
 * @param name
 * @returns {*}
 */
export const getQueryString = name => {
  let reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i')
  let r = window.location.search.substr(1).match(reg)
  if (r != null) {
    return unescape(r[2])
  }
  return null
}

/**
 * 获取微信code
 *
 * @returns {string}
 */
export const getWxCode = () => window.location.href = WX_AUTH_URL

/**
 * 设置缓存
 *
 * @param key
 * @param val
 */
export const setStorage = (key, val) => {
  if (typeof val == 'object') {
    val = JSON.stringify(val)
  }
  localStorage.setItem(key, val)
}
/**
 * 获取缓存
 *
 * @param key
 * @param isObject 是否是对象
 * @returns {*}
 */
export const getStorage = (key, isObject = false) => {
  if (isObject) {
    return JSON.parse(localStorage.getItem(key))
  }
  return localStorage.getItem(key)
}

/**
 * 判断当前浏览器是不是微信浏览器
 *
 * @returns {boolean}
 */
export const isWxBrowser = () => window.navigator.userAgent.toLowerCase().match(/MicroMessenger/i) == 'micromessenger'

/**
 * 数字填充 .00
 *
 * @param num 数值
 * @returns {string}
 */

export const keepTwoDecimalFull = num => {
  let result = parseFloat(num)
  if (isNaN(result)) {
    throw new Error('传递参数错误，请检查！')
  }
  result = Math.round(num * 100) / 100
  let s_x = result.toString()
  let pos_decimal = s_x.indexOf('.')
  if (pos_decimal < 0) {
    pos_decimal = s_x.length
    s_x += '.'
  }
  while (s_x.length <= pos_decimal + 2) {
    s_x += '0'
  }
  return s_x
}

